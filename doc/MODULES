Eggdrop Module Information
Last revised: March  04, 2003
     _________________________________________________________________

                        Eggdrop Module Information


  The purpose of this document is to show you how to download, install, create,
  and submit modules.

  Contents:
    1. What are modules?
    2. Why use modules?
    3. How to install a module
    4. Modules included with Eggdrop
    5. Programming modules
    6. What to do with a finished module


  1. What are modules?

    Modules are portions of code which are loaded separately to the bot itself
    and provide extra services. For example, the filesys module provides the
    entire file system.


  2. Why use modules?

    Modules allow C coders to add their own enhancements to the bot while
    keeping them optional and without increasing the size of the Eggdrop
    core.


  3. How to install a module

    Please note that these are only basic instructions for compiling and
    installing a module. Please read any and all directions included with
    the module you wish to install.

      1. Download and un-tar the Eggdrop source code.

      2. Place the new module in its own directory (named 'modulename') in
         modules/.

      3. Run ./bootstrap (from eggdrop1.7.x/).

      4. Run ./configure.

      5. Type 'make'.

      6. Copy the compiled module file (modulename.so) into your bot's modules
         folder.

      7. Add the module to the autoload section of the config file.

      8. Rehash or restart your bot.

    To view your currently loaded modules, type '.module'.


  4. Modules included with Eggdrop

    blowfish    Eggdrop can encrypt your userfile, so users can have secure
                passwords. Please note that when you change your encryption
                method later (i.e. using other modules like a md5 module),
                you can't use your current userfile anymore. Eggdrop will not
                start without an encryption module.

    channels    This module provides channel related support for the bot.
                Without it, you won't be able to make the bot join a channel
                or save channel specific userfile information.

    compress    This module provides provides support for file compression.
                This allows the bot to transfer compressed user files and,
                therefore, save a significant amount of bandwidth.

    console     This module provides storage of console settings when you exit
                the bot or type .store on the partyline.

    filesys     This module provides an area within the bot where users can
                store files. With this module, the bot is usable as a file
                server.

    irc         This module provides basic IRC support for your bot. You have
                to load this if you want your bot to come on IRC.

    javascript  This module provides JaveScript scripting support.

    notes       This module provides support for storing of notes for users
                from each other. Note sending between currently online users
                is supported in the core, this is only for storing the notes
                for later retrieval.

    perlscript  This module provides Perl scripting support.

    server      This module provides the core server support. You have to load
                this if you want your bot to come on IRC. Not loading this is
                equivalent to the old NO_IRC define.

    tclscript   This module provides Tcl scripting support.

    uptime      This module reports uptime statistics to the uptime contest
                web site at http://uptime.eggheads.org. Go look and see what
                your uptime is! It takes about 9 hours to show up, so if your
                bot isn't listed, try again later. See doc/settings/mod.uptime
                for more information, including details on what information is
                sent to the uptime server.


  5. Programming modules

    Note: This is for a simple module of 1 source file. If you're doing a
          multiple source file module, you shouldn't need to read this anyway.

    1. Create a modules/MODULE directory in your Eggdrop directory (where MODULE
       is the module name) and cd to it.

    2. Create a `Makefile' for your module (see the example module distributed
       with the bot). This should ensure that your module gets compiled.

    3. Next, you want to create a file called MODULE.c (MODULE is the module
       name again).

    4. You must include the following in your source code:

      a. #define MODULE_NAME "module-name"

        This should be defined to the same name you will be using when you load
        your module.

      b. #include "lib/eggdrop/module.h"

        This provides access to Eggdrop's global function table. Examine
        src/mod/module.h closely to find a list of functions available.

      c. #include any other standard c header files you might need. Note that
         stdio.h, string.h, stdlib.h, and sys/types.h are already included.

      d. eggdrop_t *egg = NULL;

        This variable provides access to all the Eggdrop functions; without it,
        you can't call any Eggdrop functions (the module won't even load).

    5. Every module must also have the following functions:

      In most modules, all functions/variables (except global and MODULE_start)
      should be static. This will drastically reduce the size of modules on
      decent systems.

      Throughout step 5, MODULE refers to the module name. Note that
      "MODULE_NAME" should literally be "MODULE_NAME".

      a. char *start(eggdrop_t *eggdrop)
        This function is called when the module is first loaded. There are
        several things that need to be done in this function:
          
          egg = eggdrop;
            
            This allows you to make calls to the global function table.

          module_register(MODULE_NAME, MODULE_table, MAJOR, MINOR);

            This records details about the module for other modules and Eggdrop
            itself to access. MAJOR and MINOR are ints, where MAJOR is the
            module's major version number and MINOR is a minor version number.
            MODULE_table is a function table (see below).

          module_depend(MODULE_NAME, "another-module", MAJOR, MINOR);
            This lets Eggdrop know that your module NEEDS "another-module" of
            major version 'MAJOR' and at least minor version 'MINOR' to run,
            and hence should try to load it if it's not already loaded. This
            will return 1 on success, or 0 if it can't be done (at which stage
            you should return an error).

          Any other initialization stuff you desire should also be included in
          this function. See below for various things you can do.

          You also will need to return a value. Returning NULL implies the
          module loaded successfully. Returning a non-NULL STRING is an error
          message. The module (and any other dependant modules) will stop
          loading and an error will be returned.

      b. static Function *MODULE_table = {
           start,
           MODULE_close,
           0,
           MODULE_report,
           any_other_functions,
           you_want_to_export
         };
         
         This is a table of functions which any other module can access. The
         first 4 functions are FIXED. You MUST have them; they provide important
         module information.

      c. static char *MODULE_close ()
        This is called when the module is unloaded. Apart from tidying any
        relevant data (I suggest you be thorough, we don't want any trailing
        garbage from modules), you MUST do the following:

          module_undepend(MODULE_NAME);
            This lets Eggdrop know your module no longer depends on any other
            modules.

          Return a value. NULL implies success; any non-NULL STRING implies
          that the module cannot be unloaded for some reason, and hence the
          bot should not unload it (see the blowfish module for an example).

      d. static void MODULE_report (int idx)
        This should provide a relatively short report of the module's status
        (for the module and status commands).


  6. What to do with a module?

     If you have written a module and feel that you wish to share it with the
     rest of the Eggdrop community, upload it to the incoming directory on
     incoming.eggheads.org (/incoming/modules/1.7). Place a nice descriptive
     text (modulename.desc) with it, and it'll make its way to the modules
     directory on ftp.eggheads.org. Don't forget to mention in your text file
     which version Eggdrop the module is written for.
     _________________________________________________________________

   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004 Eggheads Development Team
