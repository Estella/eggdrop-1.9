Eggdrop Module Information
Last revised: March 01, 2003
     _________________________________________________________________

                        Eggdrop Module Information


INDEX

I.   What are modules?
II.  Why use modules?
III. How to install a module
IV.  Modules included with Eggdrop
V.   Programming modules
VI.  What to do with a module?


I. What are modules?

  Modules are portions of code which are loaded separately to the bot itself
  and provide extra services. For example, the filesys module provides the
  entire file system.


II. Why use modules?

  Modules allow C coders to add their own enhancements to the bot without
  recompiling the whole thing, and without increasing the size of the Eggdrop
  core.


III. How to install a module

  Please note that these are only basic instructions for compiling and
  installing a module. Please read any and all directions included with
  the module you wish to install.

    1. Download and un-tar the Eggdrop source code.

    2. Place the new module in its own directory (named 'modulename') in
       modules/.

    3. Run ./bootstrap (from eggdrop1.7.x/).

    4. Run ./configure.

    5. Type 'make'.

    6. Copy the compiled module file (modulename.so) into your bot's modules
       folder.

    7. Add 'loadmodule modulename' to your eggdrop.conf file (do not
       add the .so suffix).

    8. Rehash or restart your bot.

  To see your currently running modules type '.module'.


IV. Modules included with eggdrop

  blowfish    Eggdrop can encrypt your userfile, so users can have secure
              passwords. Please note that when you change your encryption
              method later (i.e. using other modules like a md5 module),
              you can't use your current userfile anymore. Eggdrop will not
              start without an encryption module.

  channels    This module provides channel related support for the bot.
              Without it, you won't be able to make the bot join a channel
              or save channel specific userfile information.

  compress    This module provides provides support for file compression.
              This allows the bot to transfer compressed user files and,
              therefore, save a significant amount of bandwidth.

  console     This module provides storage of console settings when you exit
              the bot or type .store on the partyline.

  filesys     This module provides an area within the bot where users can
              store files. With this module, the bot is usable as a file
              server.

  irc         This module provides basic IRC support for your bot. You have
              to load this if you want your bot to come on IRC.
  
  javascript  This module provides JaveScript scripting support.

  notes       This module provides support for storing of notes for users
              from each other. Note sending between currently online users
              is supported in the core, this is only for storing the notes
              for later retrieval.

  perlscript  This module provides Perl scripting support.

  server      This module provides the core server support. You have to load
              this if you want your bot to come on IRC. Not loading this is
              equivalent to the old NO_IRC define.

  tclscript   This module provides Tcl scripting support.

  uptime      This module reports uptime statistics to http://uptime.eggheads.org.
              Go look and see what your uptime is! It takes about 9 hours to
              show up, so if your bot isn't listed, try again later. See
              doc/settings/mod.uptime for more information, including details
              on what information is sent to the uptime server.


V. Programming modules

  WARNING:
        This section is very likely to be out of date. It was not updated for
        quite some time.  The most reliable way to learn about module
        programming is to take a deep look at the other available modules.

  Note: This is for a simple module of 1 source file. If you're doing a
        multiple source file module, you shouldn't need to read this anyway. ;)

  (a) Create a modules/<module> directory in your Eggdrop tree and cd to it.

  (b) Create a `Makefile' for your module (see the example module distributed
      with the bot). This should ensure that your module gets compiled.

  (c) Next, you want to create a file called MODULE.c (MODULE is the module
      name).

     (1) Things you need to include in your source code:

         (i)   #define MODULE_NAME "module-name"

             You MUST use this. It's required by several short cuts in the
             code, and it's got to be the name you will be using in .loadmod

         (ii)  #define MAKING_MODULENAME
             You MUST also include this, or else the module won't work.
             MODULENAME is the name of your module (MODULE_NAME), but in caps.

         (iii)  #include "lib/eggdrop/module.h"

             This provides all the accessible functions in Eggdrop. Examine
             lib/eggdrop/module.h closely to find a list of functions available.

         (iv) #include any other standard C header files you might need
              (Note stdio.h, string.h, stdlib.h, and sys/types.h are already
              included).

         (v)  eggdrop_t *egg = NULL;

             This variable provides access to all the Eggdrop functions; without
             it, you can't call any Eggdrop functions (heck, the module won't
             even load).

     (2) CORE functions every module needs.

     *SIDENOTE* I suggest that in a single source file module, you define all
     functions/variables (except global and module_start) as static. This will
     drastically reduce the size of modules on decent systems.

       In each of these cases, MODULE refers to the name of your module.

       (i) char *MODULE_start(Function *func_table)
           - This function is called when the module is first loaded.
           You MUST do several things in this function:
             (a) egg = func_table;  (so you can make Eggdrop calls)

             (b) module_register(MODULE_NAME, MODULE_table, major, minor);
                 This records details about the module for other modules and
                 Eggdrop itself to access. Major is a major version number,
                 minor is a minor version number, and MODULE_table is a
                 function table (see below).

             (c) module_depend(MODULE_NAME, "another-module", major, minor);
                 This lets Eggdrop know that your module NEEDS "another-module"
                 of major version 'major' and at least minor version 'minor'
                 to run, and hence should try to load it if it's not already
                 here. This will return 1 on success, or 0 if it can't be done
                 (at which stage you should return an error).

             (d) Any other initialization stuff you desire should be included
                 in this function. See below for various things you can do.

             (e) a return value of some sort
                 Returning NULL implies the module loaded successfully,
                 therefor the bot can continue. Returning a non-NULL STRING
                 is an error message. The module (and any other dependant
                 modules) will stop loading and an error will be returned.

       (ii) static Function *MODULE_table = {
                MODULE_start,
                MODULE_close,
                MODULE_expmem,
                MODULE_report,
                any_other_functions,
                you_want_to_export
            };
            Ok, it's not a function. It's a list of functions which any
            other module can call up, so you can provide services for other
            modules (e.g. transfer has raw_dcc_send in it's table to allow
            the filesys to send files to others). The first 4 functions are
            FIXED. You MUST have them; they provide important system info.

       (iii) static char *MODULE_close ()
            - This is called when the module is unloaded.
              Apart from tidying any relevant data (I suggest you be thorough,
              we don't want any trailing garbage from modules), you MUST do
              the following:

                (a) module_undepend(MODULE_NAME);
                    This lets Eggdrop know your module no longer depends on any
                    other modules.

                (b) Return a value. NULL implies success; any non-NULL STRING
                    implies that the module cannot be unloaded for some reason,
                    and hence the bot should not unload it (see blowfish for
                    an example).

       (iv) static void MODULE_report (int idx)
            This should provide a relatively short report of the module's
            status (for .module/.status).

     (3) AVAILABLE FUNCTIONS

       WRITE ME


VI. What to do with a module?

   If you have written a module and feel that you wish to share it with the
   rest of the Eggdrop community, upload it to the incoming directory on
   incoming.eggheads.org (/incoming/modules/1.7). Place a nice descriptive
   text (modulename.desc) with it, and it'll make its way to the modules
   directory on ftp.eggheads.org. Don't forget to mention in your text file
   which version Eggdrop the module is written for.
     _________________________________________________________________

   Copyright (C) 1999, 2000, 2001, 2002, 2003 Eggheads Development Team
