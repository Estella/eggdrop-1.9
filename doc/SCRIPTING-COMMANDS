Eggdrop Scripting Commands
Last revised: March 01, 2003
     _________________________________________________________________

This is an exhaustive list of all of the scripting commands added to Eggdrop.
All of the normal built-in commands specific to the scripting module you are
using are still there, of course, but you can also use these to manipulate
features of the bot. They are listed according to category. This list is
accurate for Eggdrop v1.7.0.

*** CORE COMMANDS ***

  putlog <text>
    Description: sends text to the bot's logfile, marked as 'misc' (o)
    Returns: nothing
    Module: core

  putloglev <level(s)> <channel> <text>
    Description: sends text to the bot's logfile, tagged with all of the
      valid levels given. Use "*" to indicate all log levels.
    Returns: nothing
    Module: core

  <FINISH ME>

*** BLOWFISH/ENCRYPTION MODULE COMMANDS ***

  <WRITE ME>


*** CHANNELS MODULE COMMANDS ***
  
  setlaston <handle> <when> [channel]
    Description: updates a user's laston information with the information
      provided.
    Returns: nothing
    Module: channels

  newban [channel] <ban> <creator> <comment> [lifetime] [options]
    Description: adds a ban to the global ban list (which takes effect on
      all channels); creator is given credit for the ban in the ban list.
      lifetime is specified in minutes. If lifetime is not specified,
      global-ban-time (usually 60) is used. Setting the lifetime to 0 makes
      it a permanent ban.
    Options:
      sticky: forces the ban to be always active on a channel, even
              with dynamicbans on
      none:   no effect
    Returns: nothing
    Module: channels

  newexempt [channel] <exempt> <creator> <comment> [lifetime] [options]
    Description: adds a exempt to the global exempt list (which takes effect
      on all channels); creator is given credit for the exempt in the exempt
      list. lifetime is specified in minutes. If lifetime is not specified,
      exempt-time (usually 60) is used. Setting the lifetime to 0 makes it a
      permanent exempt. The exempt will not be removed until the
      corresponding ban has been removed.
    Options:
      sticky: forces the exempt to be always active on a channel, even
              with dynamicexempts on
      none:   no effect
    Returns: nothing
    Module: channels

  newinvite [channel] <invite> <creator> <comment> [lifetime] [options]
    Description: adds a invite to the global invite list (which takes effect
      on all channels); creator is given credit for the invite in the invite
      list. lifetime is specified in minutes. If lifetime is not specified,
      invite-time (usually 60) is used. Setting the lifetime to 0 makes it
      a permanent invite. The invite will not be removed until the channel
      has gone -i.
    Options:
      sticky: forces the invite to be always active on a channel, even
              with dynamicinvites on
      none:   no effect
    Returns: nothing
    Module: channels

  stickban [channel] <banmask>
    Description: makes a ban sticky, or, if a channel is specified, then it
      is set sticky on that channel only.
    Returns: 1 on success; 0 otherwise
    Module: channels

  unstickban [channel] <banmask>
    Description: makes a ban no longer sticky, or, if a channel is
      specified, then it is unstuck on that channel only.
    Returns: 1 on success; 0 otherwise
    Module: channels

  stickexempt [channel] <exemptmask>
    Description: makes an exempt sticky, or, if a channel is specified,
      then it is set sticky on that channel only.
    Returns: 1 on success; 0 otherwise
    Module: channels

  unstickexempt [channel] <exemptmask>
    Description: makes an exempt no longer sticky, or, if a channel is
      specified, then it is unstuck on that channel only.
    Returns: 1 on success; 0 otherwise
    Module: channels

  stickinvite [channel] <invitemask>
    Description: makes an invite sticky, or, if a channel is specified,
      then it is set sticky on that channel only.
    Returns: 1 on success; 0 otherwise
    Module: channels

  unstickinvite [channel] <invitemask>
    Description: makes an invite no longer sticky, or, if a channel is
      specified, then it is unstuck on that channel only.
    Returns: 1 on success; 0 otherwise
    Module: channels

  killban [channel] <ban>
    Description: removes a ban from the global ban list
    Returns: 1 on success; 0 otherwise
    Module: channels

  killexempt [channel] <exempt>
    Description: removes an exempt from the global exempt list
    Returns: 1 on success; 0 otherwise
    Module: channels

  killinvite [channel] <invite>
    Description: removes an invite from the global invite list
    Returns: 1 on success; 0 otherwise
    Module: channels

  ischanjuped [channel]
    Returns: 1 if the channel is juped, and the bot is unable to join; 0
      otherwise
    Module: channels

  isban [channel] <ban>
    Returns: 1 if the specified ban is in the global ban list; 0 otherwise.
      If a channel is specified, that channel's ban list is checked as well.
    Module: channels

  ispermban [channel] <ban>
    Returns: 1 if the specified ban is in the global ban list AND is marked
      as permanent; 0 otherwise. If a channel is specified, that channel's
      ban list is checked as well.
    Module: channels

  isexempt [channel] <exempt>
    Returns: 1 if the specified exempt is in the global exempt list; 0
      otherwise. If a channel is specified, that channel's exempt list is
      checked as well.
    Module: channels

  ispermexempt [channel] <exempt>
    Returns: 1 if the specified exempt is in the global exempt list AND is
      marked as permanent; 0 otherwise. If a channel is specified, that
      channel's exempt list is checked as well.
    Module: channels

  isinvite [channel] <invite>
    Returns: 1 if the specified invite is in the global invite list; 0
      otherwise. If a channel is specified, that channel's invite list is
      checked as well.
    Module: channels

  isperminvite [channel] <invite>
    Returns: 1 if the specified invite is in the global invite list AND is
      marked as permanent; 0 otherwise. If a channel is specified, that
      channel's invite list is checked as well.
    Module: channels

  isbansticky [channel] <ban>
    Returns: 1 if the specified ban is marked as sticky in the global ban
      list; 0 otherwise. If a channel is specified, that channel's ban list
      is checked as well.
    Module: channels

  isexemptsticky [channel] <exempt>
    Returns: 1 if the specified exempt is marked as sticky in the global
      exempt list; 0 otherwise. If a channel is specified, that channel's
      exempt list is checked as well.
    Module: channels

  isinvitesticky [channel] <invite>
    Returns: 1 if the specified invite is marked as sticky in the global
      invite list; 0 otherwise. If a channel is specified, that channel's
      invite list is checked as well.
    Module: channels

  matchban [channel] <nick!user@host>
    Returns: 1 if the specified nick!user@host matches a ban in the global
      ban list; 0 otherwise. If a channel is specified, that channel's ban
      list is checked as well.
    Module: channels

  matchexempt [channel] <nick!user@host>
    Returns: 1 if the specified nick!user@host matches an exempt in the
      global exempt list; 0 otherwise. If a channel is specified, that
      channel's exempt list is checked as well.
    Module: channels

  matchinvite [channel] <nick!user@host>
    Returns: 1 if the specified nick!user@host matches an invite in the
      global invite list; 0 otherwise. If a channel is specified, that
      channel's invite list is checked as well.
    Module: channels

  listbans [channel]
    Returns: a list of global bans, or, if a channel is specified, a
      list of channel-specific bans. Each entry is a sublist containing:
      hostmask, comment, expiration timestamp, time added, last time
      active, and creator. The three timestamps are in unixtime format.
    Module: channels

  listexempts [channel]
    Returns: a list of global exempts, or, if a channel is specified, a
      list of channel-specific exempts. Each entry is a sublist containing:
      hostmask, comment, expiration timestamp, time added, last time
      active, and creator. The three timestamps are in unixtime format.
    Module: channels

  listinvites [channel]
    Returns: a list of global invites, or, if a channel is specified, a
      list of channel-specific invites. Each entry is a sublist containing:
      hostmask, comment, expiration timestamp, time added, last time
      active, and creator. The three timestamps are in unixtime format.
    Module: channels

  <FINISH ME>


*** COMPRESS MODULE COMMANDS ***

  <WRITE ME>


*** CONSOLE MODULE COMMANDS ***

  <WRITE ME>


*** FILESYS MODULE COMMANDS ***

  <WRITE ME>


*** IRC MODULE COMMANDS ***

  putkick <channel> <nick,nick,...> [reason]
    Description: sends kicks to the server and tries to put as many nicks
      into one kick command as possible.
    Returns: nothing

  <FINISH ME>


*** NOTES MODULE COMMANDS ***

  <WRITE ME>


*** SCRIPT MODULE COMMANDS ***

  <WRITE ME>


*** SERVER MODULE COMMANDS ***

  irccmp <str1> <str2>
    Description: Compare str1 and str2 case independently, as specified by
      the current server. Typical uses are comparing nicks and channel names.
    Returns: < 0 if str1 < str2
             = 0 if str1 = str2
	     > 0 if str1 > str2

  get_uhost <nick>
    Returns: the uhost for the given nick, or "" if unknown

  putserv [noqueue|quick|normal|slow] [next] <text>
    Description: sends text to the server through the specified queue. The
      default queue is the normal queue. You can specify the "next"
      option even if you are using other options.
    Options:
      noqueue: send the message without waiting
      quick: high priority queue
      normal: default queue
      slow: low priority queue
    Returns: nothing

  server_fake_input <text>
    Description: Causes the server module to interpret the given text as if
      the server had sent it.
    Returns: Nothing

  server_support <field>
    Description: Provides an interface to the 005 numeric.
    Returns: The value of the field (parsed from fieldname=fieldvalue) or
      the string "true" for items with no value.

  channel_list
    Returns: the list of channels that the bot is currently on

  channel_members <chan>
    Returns: the list of nicks on the given channel

  channel_topic <chan>
    Returns: the topic, nick that set the topic, time topic was set

  channel_mode <chan> [nick]
    Returns: Either the mode of the channel, with no arguments (such as key),
      or the mode of the nick on that channel (if given).

  channel_key <chan>
    Returns: The key of the given channel.

  channel_limit <chan>
    Returns: The limit of the given channel.
 
  channel_bans <chan>
    Returns: The list of bans in the channel. Each item of the list is itself
      a list of the form {banmask, who_set_it, when_it_was_set}

  server_queue_len <queue> [next]
    Returns: Number of messages in the given queue

  server_queue_get [queue] [next] <msgnum>
    Description: Allows scripts to read the server's output queues. Messages
      start at number 0. If [queue] isn't given, the normal queue is assumed.
    Returns: The text of the desired message

  server_queue_set [queue] [next] <msgnum> <msg>
    Description: Allows scripts to overwrite messages in the server's output
      queues. If [queue] isn't given, the normal queue is assumed.
    Returns: Nothing

  server_queue_insert [queue] [next] <msgnum> <msg>
    Description: Inserts messages into the given output queue. To add a message
      to the end, make <msgnum> larger than the current queue length. Or use
      putserv :)
    Returns: Nothing

  dcc_chat <nick> [timeout]
    Description: Starts a dcc chat with the given nick.
    Returns: An unconnected idx.

  dcc_send <nick> <filename> [timeout]
    Description: Starts a dcc send with the given nick. Resumes are handled
      automatically.
    Returns: An unconnected idx.

  dcc_send_info <idx> <stat-type>
    Description: Returns information about a dcc send.
    Options for stat-type:
      bytes_left: number of bytes remaining to be sent
      bytes_sent: number of bytes already sent
      total_cps: average cps since the send began
      snapshot_cps: average cps over the last several seconds
    Returns: The requested information

  dcc_accept_send <nick> <localfile> <remotefile> <size> <resume> <ip> <port> [timeout]
    Description: Accepts a dcc send, as triggered by the dcc_recv bind.
    Returns: An unconnected idx

  <FINISH ME>


*** GLOBAL VARIABLES ***

  botnick
    Value: the current nickname the bot is using on IRC
    Module: server

  server
    Value: the server list index of the current server the bot is using
    Module: server

  servidx
    Value: the idx of the server socket
    Module: server

  <FINISH ME>


*** BINDS ***

  <WRITE ME>

*** NETWORK COMMANDS ***

  net_listen <port>
    Description: Opens a listening port. If <port> is in use, it will try up to
      20 higher ports until a free one is found.
    Returns: A list of 2 items: The new idx, and the real port being used.
    Notes: When an incoming connection is accepted, the "newclient" event will
      execute.

  net_open <host> <port> [timeout]
    Description: Opens an async connection to the given host and port. If
      'host' is not an ip address, a dns lookup is performed without blocking.
      The 'timeout' optional parameter lets you specify a connection timeout
      in milliseconds. If not given, or if the value is 0, then eggdrop's
      default timeout value is used. If given as -1, no timeout is used.
    Returns: A valid idx in an unconnected state.
    Notes: When the connection is established, the "connect" event will
      execute. If there is a dns error, a connection error, or the timeout
      elapses, the "eof" event will execute with the appropriate error code.
      Use the net_handler command to set handlers for these events.

  net_close <idx>
    Description: Close the given idx.
    Returns: 0 for success, -1 if the idx is invalid or already closed.

  net_write <idx> <text> [len]
    Description: Writes data to an idx.
    Returns: The number of bytes written to the actual network interface, or
      -1 upon error.
    Notes: Any unwritten data is buffered and will be written as soon as
      possible. Use the 'len' parameter if you are writing binary data which
      contains embedded NULL's, otherwise the C strlen() function is used to
      determined the number of bytes to write.

  net_handler <idx> <event> [callback]
    Description: Sets or unsets a callback for a particular event on an idx.
      The syntax of the callback varies with the event:
      connect_callback <idx> <peer_ip> <peer_port>
        Called when the idx establishes an outgoing connection.
      newclient_callback <idx> <newidx> <peer_ip> <peer_port>
        Called when an incoming connection is established.
      eof_callback <idx> <err> <errmsg>
        Called when eof is detected or there is an error, such as when the
        connection times out or is refused by the host.
      read_callback <idx> <data> <len>
        Called when data is ready on the idx, after any filtering has been
        performed. (For more information, see net_linemode.)
      written_callback <idx> <len> <remaining_len>
        Called when buffered data has been written in the background.
      delete_callback <idx>
        Called when the idx is deleted.
    Returns: 0 for success, -1 for an invalid idx, -2 for an invalid event type.
    Notes: To unset a handler, leave off the 'callback' parameter.

  net_info <idx> <what>
    Description: Provides statistics on a given idx. Possible values for 'what'
      are:
      bytesleft - number of buffered bytes remaining to be written

  net_linemode <idx> <on-off>
    Description: Sets line buffering to either on (1) or off (0) for an idx.
      When linemode is on, data is buffered until a full line is read. If more
      than one line is read, the "read" event is triggered for each individual
      line. The line is passed to the read handler with the end-of-line (either
      CR, LF, or CRLF) stripped from the data.
    Returns: Nothing.

  net_throttle <idx> <speed-in> <speed-out>
    Description: Turn on speed throttling. The values given are in bytes per
      second.
    Returns: Nothing.
    Notes: A speed parameter of <= 0 will disable throttling for that direction.

  net_throttle_in <idx> <speed-in>
    Description: Modify the 'speed-in' parameter of an already-throttled idx.
    Returns: Nothing.
    Notes: A 'speed-in' of <= 0 will disable input throttling.

  net_throttle_out <idx> <speed-out>
    Description: Modify the 'speed-out' parameter of an already-throttled idx.
    Returns: Nothing.
    Notes: A 'speed-out' of <= 0 will disable output throttling.

  net_throttle_off <idx>
    Description: Removes throttling from an idx.

*** TCL ONLY ***

  net_add_tcl <channel>
    Description: Adds a tcl channel to eggdrop's event loop so that its events
      can be serviced quickly.
    Returns: Nothing.

  net_rem_tcl <channel>
    Description: Removes a previously added tcl channel from eggdrop's event
      loop.
    Returns: Nothing.
